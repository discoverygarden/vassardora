<?php

/**
 * @file
 * Hook implementations for Vassar.
 */

define('VASSARDORA_FULLTEXT_PATH', 'vassardora/bookreader_fulltext');

/**
 * Implements hook_preprocess_HOOK().
 *
 * Adds in some JS overrides.
 */
function vassardora_preprocess_islandora_internet_archive_bookreader(array &$variables) {
  $mod_path = drupal_get_path('module', 'vassardora');
  drupal_add_js("$mod_path/js/bookreader_overrides.js", array(
    'weight' => 5,
  ));
  drupal_add_css("$mod_path/css/bookreader.css");
  drupal_add_js(array(
      'vassardora' => array(
        'text_url' => url(VASSARDORA_FULLTEXT_PATH),
      ),
    ), array(
      'type' => 'setting',
    )
  );
}


/**
 * Implements hook_menu().
 */
function vassardora_menu() {
  $items = array();

  $items[VASSARDORA_FULLTEXT_PATH] = array(
    'title' => 'Vassardora Fulltext Alternative Callback',
    'page callback' => 'vassardora_fulltext_page_callback',
    'access callback' => 'vassardora_fulltext_access_callback',
    'access arguments' => array(),
    'type' => MENU_CALLBACK,
  );

  $items['admin/islandora/vassardora'] = array(
    'title' => 'Vassardora Config',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vassardora_admin_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/admin.form.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['islandora/object/%islandora_object/Metadata'] = array(
    'title' => 'Metadata',
    'page callback' => 'vassardora_mods_view',
    'page arguments' => array(2),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'vassardora_access_metadata',
    'access arguments' => array(2),
  );
  return $items;
}

/**
 * Only show the metadata tab for bookCModel.
 *
 * @param AbstractObject $object
 *   The fedora object to run the check on.
 *
 * @return bool
 *   Returns TRUE if should be made available.
 */
function vassardora_access_metadata(AbstractObject $object) {
  if (in_array('islandora:bookCModel', $object->models)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Returns the block array to be rendered with MODS metadata.
 *
 * @param abstractobject $object
 *   Fedora object to generate MODs forms for
 *
 * @return array
 *   Returns an array of block data to be rendered.
 */
function vassardora_mods_view(AbstractObject $object) {
  $block = array();
  $block['content'] = array(
    '#markup' => vassardora_mods_markup($object),
  );
  return $block;
}

/**
 * Generate the markup for the given fedora objects metadata.
 *
 * @param AbstractObject $object
 *   The fedora object to get a read only form for.
 *
 * @return unknown
 *   Returns rendered html content.
 */
function vassardora_mods_markup(AbstractObject $object) {
  $form = array(
    'collection_metadata' => array(),
  );
  if (isset($object['MODS'])) {
    $content = $object['MODS']->content;
    $metadata = drupal_get_form('Islandora Book MODS Read Only', $content);
    $form['collection_metadata']['metadata'] = $metadata;
  }
  $output = drupal_render($form);
  return $output;
}

/**
 * Implements hook_islandora_xml_form_builder_forms().
 */
function vassardora_islandora_xml_form_builder_forms() {
  $module_path = drupal_get_path('module', 'vassardora');
  return array(
    'Islandora Book MODS Read Only' => array(
      'form_file' => "$module_path/xml/book_form_mods_read_only.xml",
    ),
  );
}

/**
 * Access callback.
 */
function vassardora_fulltext_access_callback() {
  $to_return = FALSE;

  if (isset($_GET['pids'])) {
    $pids = (array) $_GET['pids'];
    foreach ($pids as $pid) {
      $object = islandora_object_load($pid);
      if ($object) {
        $to_return = islandora_user_access($object, array(FEDORA_VIEW_OBJECTS));

        if (!$to_return) {
          // If anything returns FALSE, return it...
          break;
        }
      }
    }
  }

  return $to_return;
}

/**
 * Page callback to render the fulltext as desired.
 */
function vassardora_fulltext_page_callback() {
  // Get the datastream IDs from which we'll try to get the language variants.
  $lang_one_dsid = variable_get('vassardora_language_one_fulltext_datastream', 'LANGUAGE_1');
  $lang_two_dsid = variable_get('vassardora_language_two_fulltext_datastream', 'LANGUAGE_2');

  $output = '';
  $pids = (array) $_GET['pids'];
  $num_pids = count($pids);
  if ($num_pids == 2) {
    // Render two-page view.
    $objects = array_filter(array_map('islandora_object_load', $pids));
    list($left_object, $right_object) = $objects;

    $pages = array(
      'language_1' => array(
        'label' => t(variable_get('vassardora_language_one', 'Language 1')),
        'sections' => array(
          array(
            'label' => t('Left'),
            'text' => vassardora_load_fulltext($left_object, $lang_one_dsid),
          ),
          array(
            'label' => t('Right'),
            'text' => vassardora_load_fulltext($right_object, $lang_one_dsid),
          ),
        ),
      ),
      'language_2' => array(
        'label' => t(variable_get('vassardora_language_two', 'Language 2')),
        'sections' => array(
          array(
            'label' => t('Left'),
            'text' => vassardora_load_fulltext($left_object, $lang_two_dsid),
          ),
          array(
            'label' => t('Right'),
            'text' => vassardora_load_fulltext($right_object, $lang_two_dsid),
          ),
        ),
      ),
      'ocr' => array(
        'label' => t('OCR'),
        'sections' => array(
          array(
            'label' => t('Left'),
            'text' => vassardora_load_fulltext($left_object, 'OCR'),
          ),
          array(
            'label' => t('Right'),
            'text' => vassardora_load_fulltext($right_object, 'OCR'),
          ),
        ),
      ),
    );

    $output = theme('vassardora_fulltext', array(
      'pids' => $pids,
      'objects' => $objects,
      'pages' => $pages,
    ));
  }
  elseif ($num_pids == 1) {
    // Render one-page view.
    $object = islandora_object_load(reset($pids));

    $pages = array(
      'language_1' => array(
        'label' => t(variable_get('vassardora_language_one', 'Language 1')),
        'sections' => array(
          array(
            'label' => $object->label,
            'text' => vassardora_load_fulltext($object, $lang_one_dsid),
          ),
        ),
      ),
      'language_2' => array(
        'label' => t(variable_get('vassardora_language_two', 'Language 2')),
        'sections' => array(
          array(
            'label' => $object->label,
            'text' => vassardora_load_fulltext($object, $lang_two_dsid),
          ),
        ),
      ),
    );

    // Kinda gross, but we only want to add the side-by-side if we have text
    // in both languages.
    if ($pages['language_1']['sections'][0]['text'] && $pages['language_2']['sections'][0]['text']) {
      $pages['full_text'] = array(
        'label' => t('Side-by-side'),
        'sections' => array(
          array(
            'label' => t(variable_get('vassardora_language_one', 'Language 1')),
            'text' => $pages['language_1']['sections'][0]['text'],
          ),
          array(
            'label' => t(variable_get('vassardora_language_two', 'Language 2')),
            'text' => $pages['language_2']['sections'][0]['text'],
          ),
        ),
      );
    }

    // Add in a page for the base OCR...
    $pages['ocr'] = array(
      'label' => t('OCR'),
      'sections' => array(
        array(
          'label' => $object->label,
          'text' => vassardora_load_fulltext($object, 'OCR'),
        ),
      ),
    );

    $output = theme('vassardora_fulltext', array(
      'pids' => $pids,
      'objects' => array($object),
      'pages' => $pages,
    ));
  }
  else {
    // Throw a 400 error of some kind.
    drupal_not_found();
  }
  echo $output;
  drupal_exit();
}

/**
 * Implements hook_theme().
 */
function vassardora_theme() {
  $items = array();

  $items['vassardora_fulltext'] = array(
    'file' => 'theme/theme.inc',
    'variables' => array(
      'pids' => NULL,
      'pages' => array(),
    ),
    'template' => 'theme/vassardora-multiple-fulltexts',
  );

  return $items;
}

/**
 * Get the a fulltext representation for the current stream.
 *
 * @param AbstractObject $object
 *   The object from which we want to get fulltext.
 * @param string $datastream_id
 *   The datastream from which to attempt to grab fulltext.
 *
 * @return string|bool
 *   A string containing the fulltext, or FALSE if there was none to get.
 */
function vassardora_load_fulltext(AbstractObject $object, $datastream_id) {
  if (isset($object[$datastream_id])) {
    return htmlspecialchars($object[$datastream_id]->content);
  }

  return FALSE;
}
